---
eda_credential_types:
  - name: "Basic Event Stream"
    namespace: "event_stream"
    description: "Credential for EventStreams that use Basic Authentication. It requires a username and password"
    kind: "basic"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: basic
      - id: username
        type: string
        label: Username
        help_text: The username used to authenticate the incoming event stream
      - id: password
        type: string
        label: Password
        secret: true
        help_text: The password used to authenticate the incoming event stream
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: Authorization
      required:
      - auth_type
      - password
      - username
      - http_header_key

    injectors: {}  - name: "Container Registry"
    namespace: "registry"
    description: ""
    kind: "registry"
    inputs:
      fields:
      - id: host
        type: string
        label: Authentication URL
        default: quay.io
        help_text: Authentication endpoint for the container registry.
      - id: username
        type: string
        label: Username
      - id: password
        type: string
        label: Password or Token
        secret: true
        help_text: A password or token used to authenticate with
      - id: verify_ssl
        type: boolean
        label: Verify SSL
        default: true
      required:
      - host

    injectors: {}  - name: "Dynatrace Event Stream"
    namespace: "event_stream"
    description: "Credential for Dynatrace Event Stream. This is a clone of the Basic authentication."
    kind: "dynatrace"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: basic
      - id: username
        type: string
        label: Username
        help_text: The username used to authenticate the incoming event stream
      - id: password
        type: string
        label: Password
        secret: true
        help_text: The password used to authenticate the incoming event stream
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: Authorization
        help_text: The HTTP header for passing in the credentials usually this is Authorization.
      required:
      - auth_type
      - username
      - password
      - http_header_key

    injectors: {}  - name: "ECDSA Event Stream"
    namespace: "event_stream"
    description: "Credential for Event Streams that use Elliptic Curve DSA. This requires a public key and the headers that carry the signature."
    kind: "ecdsa"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: ecdsa
      - id: http_header_key
        type: string
        label: Primary Header Key
        help_text: The sender will use this HTTP header to pass in the signature
      - id: public_key
        type: string
        label: Public Key
        help_text: Public Key for validating the data, this would be available from the
          sender after you have created the event stream on their side with our URL. This
          is usually a 2 step process
        multiline: true
      - id: prefix_http_header_key
        type: string
        label: Additional Prefix Header Key
        help_text: Additional Header Key for ECDSA.
      - id: signature_encoding
        type: string
        label: Signature Encoding
        choices:
        - base64
        - hex
        default: base64
        help_text: The payload signature which is binary is converted as a base64 or hex
          strings before being added to the HTTP header
      - id: hash_algorithm
        type: string
        label: Hash algorithm
        choices:
        - blake2b
        - blake2s
        - md4
        - md5
        - md5-sha1
        - ripemd160
        - sha1
        - sha224
        - sha256
        - sha384
        - sha3_224
        - sha3_256
        - sha3_384
        - sha3_512
        - sha512
        - sha512_224
        - sha512_256
        - shake_128
        - shake_256
        - sm3
        - whirlpool
        default: sha256
        help_text: The EventStream sender hashes the message being sent using one of these
          algorithms, which guarantees message integrity.
      required:
      - auth_type
      - http_header_key
      - public_key
      - signature_encoding
      - hash_algorithm

    injectors: {}  - name: "GitHub Event Stream"
    namespace: "event_stream"
    description: "Credential for Github EventStream. This is a specialization of the HMAC authentication which only requires a secret to be provided."
    kind: "github"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: hmac
      - id: secret
        type: string
        label: HMAC Secret
        secret: true
        help_text: The symmetrical shared secret between EDA and the EventStream Server.
          Please save this value since you would need it on the EventStream Server.
      - id: hash_algorithm
        type: string
        label: HMAC Algorithm
        hidden: true
        choices:
        - sha128
        - sha256
        - sha512
        - sha1024
        default: sha256
        help_text: The EventStream sender hashes the message being sent using one of these
          algorithms, which guarantees message integrity.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: X-Hub-Signature-256
        help_text: The event stream sender typically uses a special HTTP header to send
          the signature of the payload. e.g X-Hub-Signature-256
      - id: signature_encoding
        type: string
        label: Signature Encoding
        hidden: true
        choices:
        - base64
        - hex
        default: hex
        help_text: The payload signature which is binary is converted as a base64 or hex
          strings before being added to the HTTP header
      - id: signature_prefix
        type: string
        label: Signature prefix
        hidden: true
        default: sha256=
        help_text: The signature might optionally have a prefix.e.g sha256=
      required:
      - auth_type
      - secret
      - hash_algorithm
      - http_header_key
      - signature_encoding
      - signature_prefix

    injectors: {}  - name: "GitLab Event Stream"
    namespace: "event_stream"
    description: "Credential for Gitlab Event Streams. This is a specialization of the Token authentication with the X-Gitlab-Token header."
    kind: "gitlab"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: token
      - id: token
        type: string
        label: Token
        secret: true
        help_text: The symmetrical shared token between EDA and the Gitlab Server. Please
          save this value since you would need it on the EventStream Server.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: X-Gitlab-Token
        help_text: The HTTP header for passing in the token usually this is Authorization
          but some sites use a different header, e.g. X-Gitlab-Token
      required:
      - auth_type
      - token
      - http_header_key

    injectors: {}  - name: "GPG Public Key"
    namespace: "gpg_public_key"
    description: ""
    kind: "cryptography"
    inputs:
      fields:
      - id: gpg_public_key
        type: string
        label: GPG Public Key
        secret: true
        help_text: GPG Public Key used to validate content signatures.
        multiline: true
      required:
      - gpg_public_key

    injectors: {}  - name: "HMAC Event Stream"
    namespace: "event_stream"
    description: "Credential for Event Streams that use HMAC. This requires shared secret between the sender and receiver. The signature can be sent as hex or base64 strings. Most of senders will use a special HTTP header to send the signature data."
    kind: "hmac"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: hmac
      - id: secret
        type: string
        label: Secret
        secret: true
        help_text: The symmetrical shared secret between EDA and the Event Stream Server.
          Please save this value since you would need it on the Event Stream Server.
      - id: hash_algorithm
        type: string
        label: Hash algorithm
        choices:
        - blake2b
        - blake2s
        - md4
        - md5
        - md5-sha1
        - ripemd160
        - sha1
        - sha224
        - sha256
        - sha384
        - sha3_224
        - sha3_256
        - sha3_384
        - sha3_512
        - sha512
        - sha512_224
        - sha512_256
        - shake_128
        - shake_256
        - sm3
        - whirlpool
        default: sha256
        help_text: The EventStream sender hashes the message being sent using one of these
          algorithms, which guarantees message integrity.
      - id: http_header_key
        type: string
        label: HMAC Header Key
        default: X-Hub-Signature-256
        help_text: The event stream sender typically uses a special HTTP header to send
          the signature of the payload. e.g X-Hub-Signature-256
      - id: signature_encoding
        type: string
        label: Signature Encoding
        choices:
        - base64
        - hex
        default: base64
        help_text: The payload signature which is binary is converted as a base64 or hex
          strings before being added to the HTTP header
      - id: signature_prefix
        type: string
        label: Signature prefix
        help_text: The signature might optionally have a prefix.e.g sha256=
      required:
      - auth_type
      - secret
      - hash_algorithm
      - http_header_key
      - signature_encoding

    injectors: {}  - name: "OAuth2 Event Stream"
    namespace: "event_stream"
    description: "Credential for Event Streams that use OAuth2. This needs a client id and client credential and access to an Authorization server so we can introspect the token being sent."
    kind: "oauth2"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: oauth2
      - id: client_id
        type: string
        label: Client ID
        help_text: The Client ID from the Authorization Server.
      - id: client_secret
        type: string
        label: Client Secret
        secret: true
        help_text: The Client Secret from the Authorization Server.
      - id: introspection_url
        type: string
        label: Introspection URL
        help_text: The Introspection URL from the Authorization Server as defined in RFC
          7662.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: Authorization
        help_text: The HTTP header for passing in the token usually this is Authorization.
      required:
      - auth_type
      - http_header_key
      - client_secret
      - client_id
      - introspection_url

    injectors: {}  - name: "OAuth2 JWT Event Stream"
    namespace: "event_stream"
    description: "Credential for Event Streams that use OAuth2 with JWT. This needs a JWKS URL which will be used to fetch the public key and validate the incoming token. If an audience is specified we will check the audience in the JWT claims."
    kind: "oauth2_jwt"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: oauth2-jwt
      - id: jwks_url
        type: string
        label: JWKS URL
        help_text: JSON Web Key Sets URL to fetch public keys to validate JWT token. Its
          usually https://<your auth server>/.well-known/jwks.json
      - id: audience
        type: string
        label: Audience
        help_text: Audience from the JWT claims, if specified we will validate the audience
          in the JWT claims.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: Authorization
        help_text: The HTTP header for passing in the token usually this is Authorization.
      required:
      - auth_type
      - jwks_url
      - http_header_key

    injectors: {}  - name: "Red Hat Ansible Automation Platform"
    namespace: "controller"
    description: ""
    kind: "cloud"
    inputs:
      fields:
      - id: host
        type: string
        label: Red Hat Ansible Automation Platform
        help_text: Red Hat Ansible Automation Platform base URL to authenticate with.
      - id: username
        type: string
        label: Username
        help_text: Red Hat Ansible Automation Platform username id to authenticate as.This
          should not be set if an OAuth token is being used.
      - id: password
        type: string
        label: Password
        secret: true
      - id: oauth_token
        type: string
        label: OAuth Token
        secret: true
        help_text: An OAuth token to use to authenticate with.This should not be set if
          username/password are being used.
      - id: verify_ssl
        type: boolean
        label: Verify SSL
        secret: false
      required:
      - host

    injectors:
      env:
        TOWER_HOST: !unsafe '{{host}}'
        TOWER_PASSWORD: !unsafe '{{password}}'
        TOWER_USERNAME: !unsafe '{{username}}'
        CONTROLLER_HOST: !unsafe '{{host}}'
        TOWER_VERIFY_SSL: !unsafe '{{verify_ssl}}'
        TOWER_OAUTH_TOKEN: !unsafe '{{oauth_token}}'
        CONTROLLER_PASSWORD: !unsafe '{{password}}'
        CONTROLLER_USERNAME: !unsafe '{{username}}'
        CONTROLLER_VERIFY_SSL: !unsafe '{{verify_ssl}}'
        CONTROLLER_OAUTH_TOKEN: !unsafe '{{oauth_token}}'

  - name: "ServiceNow Event Stream"
    namespace: "event_stream"
    description: "Credential for ServiceNow Event Stream. This is a specialization of the Token authentication which only requires a token to be provided."
    kind: "snow"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: token
      - id: token
        type: string
        label: Token
        secret: true
        help_text: The symmetrical shared token between EDA and the ServiceNow Server. Please
          save this value since you would need it on the EventStream Server.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        hidden: true
        default: Authorization
        help_text: The HTTP header for passing in the token usually this is Authorization
          but some sites use a different header, e.g. X-Gitlab-Token
      required:
      - auth_type
      - token
      - http_header_key

    injectors: {}  - name: "Source Control"
    namespace: "scm"
    description: ""
    kind: "scm"
    inputs:
      fields:
      - id: username
        type: string
        label: Username
      - id: password
        type: string
        label: Password
        secret: true
      - id: ssh_key_data
        type: string
        label: SCM Private Key
        format: ssh_private_key
        secret: true
        multiline: true
      - id: ssh_key_unlock
        type: string
        label: Private Key Passphrase
        secret: true

    injectors: {}  - name: "Token Event Stream"
    namespace: "event_stream"
    description: "Credential for Event Streams that use Token Authentication. Usually the token is sent in the Authorization header. Some of the senders will use a special HTTP header to send the token."
    kind: "token"
    inputs:
      fields:
      - id: auth_type
        type: string
        label: Event Stream Authentication Type
        hidden: true
        default: token
      - id: token
        type: string
        label: Token
        secret: true
        help_text: The symmetrical shared token between EDA and the EventStream Server.
          Please save this value since you would need it on the EventStream Server.
      - id: http_header_key
        type: string
        label: HTTP Header Key
        default: Authorization
        help_text: The HTTP header for passing in the token usually this is Authorization
          but some sites use a different header, e.g. X-Gitlab-Token
      required:
      - auth_type
      - token
      - http_header_key

    injectors: {}  - name: "Vault"
    namespace: "vault"
    description: ""
    kind: "vault"
    inputs:
      fields:
      - id: vault_password
        type: string
        label: Vault Password
        secret: true
        ask_at_runtime: true
      - id: vault_id
        type: string
        label: Vault Identifier
        format: vault_id
        help_text: 'Specify an (optional) Vault ID. This is equivalent to specifying the
          --vault-id Ansible parameter for providing multiple Vault passwords.  Note: this  feature
          only works in Ansible 2.4+.'
      required:
      - vault_password

    injectors: {}...
